// Dados das quest√µes
const quizData = [
  {
    id: "question1",
    panoramaId: "img1",
    mediaIndex: 1,
    type: "multiple-choice",
    question:
      "Nesta plataforma, que d√° acesso ao biot√©rio,os agentes biol√≥gicos mantidos  representam qual tipo de risco para a sa√∫de humana e para o ambiente?",
    options: [
      {
        letter: "A",
        answer: "Risco individual: moderado; Risco comunit√°rio: baixo",
        correct: false,
      },
      {
        letter: "B",
        answer: "Risco individual: alto; Risco comunit√°rio: moderado",
        correct: true,
      },
      {
        letter: "C",
        answer: "Risco individual: alto; Risco comunit√°rio: alto",
        correct: false,
      },
    ],
  },
  {
    id: "question2",
    panoramaId: "img2",
    mediaIndex: 2,
    type: "multiple-choice",
    question:
      "Voc√™ sabe que a entrada aqui √© s√≥ para os VIPs, n√©? Nos ambientes de animais s√≥ entra quem tem autoriza√ß√£o! Isso significa que apenas pessoas treinadas e com permiss√£o especial podem circular por l√°. Nenhum usu√°rio externo  pode circular desacompanhado aqui. Por isso, o respons√°vel pelo biot√©rio entra junto com o usu√°rio. Se voc√™ j√° tem a autoriza√ß√£o, pode entrar. Mas antes me responde uma pergunta: Como voc√™ est√° se sentindo hoje?",
    options: [
      {
        letter: "A",
        answer: "T√¥ com a garganta inflamada e tossindo de vez em quando.",
        correct: false,
      },
      {
        letter: "B",
        answer: "T√¥ me sentindo febril e com dores no corpo",
        correct: false,
      },
      {
        letter: "C",
        answer: "T√¥ com uma dor de cabe√ßa que vou te contar...",
        correct: false,
      },
      { letter: "D", answer: "T√¥ bem e com disposi√ß√£o. ", correct: true },
    ],
  },
  {
    id: "question3",
    panoramaId: "img3",
    mediaIndex: 3,
    type: "image-selection",
    question:
      "Opa! Opa! Antes de se paramentar precisamos saber se voc√™ sabe o que vai ter que retirar e guardar aqui nas gavetas. J√° que voc√™ entrou antes em um NBA2,  j√° conhece a Norma Regulamentadora 32. Ent√£o nada de usar adere√ßos enquanto estiver trabalhando em um ambiente de risco biol√≥gico! Isso vale para TODO MUNDO, independente do que voc√™ faz. Agora toque nos itens que voc√™ precisa retirar, antes de se paramentar:",
    options: [
      {
        id: "badge",
        answer: "Crach√°",
        correct: false,
        image: "./media//quiz/badge.png",
      },
      {
        id: "black-jacket",
        answer: "Jaqueta preta",
        correct: false,
        image: "./media//quiz/black-jacket.png",
      },
      {
        id: "bracelet",
        answer: "Pulseira",
        correct: false,
        image: "./media//quiz/bracelet.png",
      },
      {
        id: "buttons",
        answer: "Botons",
        correct: false,
        image: "./media//quiz/buttons.png",
      },
      {
        id: "cap",
        answer: "Bon√©",
        correct: false,
        image: "./media//quiz/cap.png",
      },
      {
        id: "clock",
        answer: "Rel√≥gio",
        correct: false,
        image: "./media//quiz/clock.png",
      },
      {
        id: "cord",
        answer: "Cord√£o",
        correct: true,
        image: "./media//quiz/cord.png",
      },
      {
        id: "earring",
        answer: "Brinco",
        correct: false,
        image: "./media//quiz/earring.png",
      },
      {
        id: "green-shirt",
        answer: "Camiseta verde",
        correct: true,
        image: "./media//quiz/green-shirt.png",
      },
      {
        id: "half",
        answer: "Meia",
        correct: true,
        image: "./media//quiz/half.png",
      },
      {
        id: "finger",
        answer: "Dedo",
        correct: true,
        image: "./media//quiz/finger.png",
      },
      {
        id: "glasses",
        answer: "√ìculos",
        correct: true,
        image: "./media//quiz/glasses.png",
      },
      {
        id: "headset",
        answer: "Fone de ouvido",
        correct: true,
        image: "./media//quiz/headset.png",
      },
      {
        id: "ring",
        answer: "Anel",
        correct: true,
        image: "./media//quiz/ring.png",
      },
      {
        id: "shoe",
        answer: "Sapato",
        correct: true,
        image: "./media//quiz/shoe.png",
      },
      {
        id: "tie",
        answer: "Gravata",
        correct: true,
        image: "./media//quiz/tie.png",
      },
    ],
  },
  {
    id: "question4",
    panoramaId: "img4",
    mediaIndex: 4,
    type: "ordering",
    question: "Organize os passos para descarte correto de res√≠duos qu√≠micos:",
    options: [
      { letter: "A", answer: "Etiquetar corretamente", order: 1 },
      { letter: "B", answer: "Armazenar em local apropriado", order: 2 },
      { letter: "C", answer: "Separar os tipos de res√≠duos", order: 3 },
      { letter: "D", answer: "Descartar conforme regulamenta√ß√£o", order: 4 },
    ],
  },
];

let correctSelections = new Set(); // Armazena as imagens corretas selecionadas - quest√£o do tipo image-selection
let answered = false; // Evita que o usu√°rio responda novamente - quest√£o do tipo image-selection

// Fun√ß√£o para obter a resposta salva do usu√°rio para uma quest√£o espec√≠fica
function getSelectedAnswer(questionId) {
  const progress = getProgress();
  return progress.selectedAnswers && progress.selectedAnswers[questionId]
    ? progress.selectedAnswers[questionId]
    : [];
}

// Fun√ß√£o para salvar progresso nos cookies
function saveProgress(questionId, selectedAnswers) {
  let questionData = quizData.find((q) => q.id === questionId);
  if (!questionData) return;

  let progress = getProgress();

  // Inicializa selectedAnswers se n√£o existir
  if (!progress.selectedAnswers) {
    progress.selectedAnswers = {};
  }

  // Identifica o tipo de quest√£o
  const isImageSelection = questionData.type === "image-selection";

  // Para m√∫ltipla escolha: sempre adiciona a quest√£o como respondida
  if (!isImageSelection) {
    if (!progress.answeredQuestions.includes(questionId)) {
      progress.answeredQuestions.push(questionId);
    }
  } else {
    // Para image-selection, a quest√£o s√≥ √© marcada como respondida se TODAS as respostas corretas forem selecionadas
    const allCorrectAnswers = questionData.options
      .filter((opt) => opt.correct)
      .map((opt) => opt.id);

    const isFullyCorrect =
      selectedAnswers.length === allCorrectAnswers.length &&
      selectedAnswers.every((ans) => allCorrectAnswers.includes(ans));

    if (isFullyCorrect) {
      if (!progress.answeredQuestions.includes(questionId)) {
        progress.answeredQuestions.push(questionId);
      }
    }
  }

  progress.selectedAnswers[questionId] = selectedAnswers; // Atualiza respostas salvas
  progress.lastQuestion = questionId; // √öltima quest√£o respondida
  progress.lastPanorama = questionData.panoramaId; // Panorama da √∫ltima quest√£o respondida

  document.cookie = `quizProgress=${JSON.stringify(
    progress
  )};path=/;expires=Fri, 31 Dec 9999 23:59:59 GMT`;
}

// Fun√ß√£o para retornar dados da quest√£o correta
function getCorrectAnswers(question, selectedAnswers) {
  let isFullyCorrect = false; // Declarado antes para ser usado no escopo global da fun√ß√£o
  if (question.type === "image-selection" || question.type === "ordering") {
    // üöÄ Verifica se todas as respostas corretas foram selecionadas
    const allCorrectAnswers = question.options
      .filter((opt) => opt.correct)
      .map((opt) => opt.id);

    const correctSelectionsCount = selectedAnswers.filter((ans) =>
      allCorrectAnswers.includes(ans)
    ).length;

    isFullyCorrect =
      selectedAnswers.length === allCorrectAnswers.length &&
      selectedAnswers.every((ans) => allCorrectAnswers.includes(ans));

    return { allCorrectAnswers, isFullyCorrect, correctSelectionsCount };
  }
}

// Fun√ß√£o para renderizar a pergunta dentro do modal
function renderQuestion(panoramaId) {
  const modalContent = document.getElementById("quizModalContent");
  modalContent.innerHTML = ""; // Limpa conte√∫do anterior

  const question = quizData.find((q) => q.panoramaId === panoramaId);
  if (!question) {
    modalContent.innerHTML =
      "<p>Nenhuma pergunta dispon√≠vel para este panorama.</p>";
    return;
  }

  let isFullyCorrect = false; // Declarado antes para ser usado no escopo global da fun√ß√£o
  let correctSelectionsCount = 0; // Declarado antes para ser usado no escopo global da fun√ß√£o
  let allCorrectAnswers = []; 

  const progress = getProgress();
  const alreadyAnswered = progress.answeredQuestions.includes(question.id);
  const selectedAnswers = getSelectedAnswer(question.id); // Pega a resposta salva

  if (question.type === "image-selection" || question.type === "ordering") {
    // üöÄ Verifica se todas as respostas corretas foram selecionadas
    allCorrectAnswers = question.options
      .filter((opt) => opt.correct)
      .map((opt) => opt.id);

    correctSelectionsCount = selectedAnswers.filter((ans) =>
      allCorrectAnswers.includes(ans)
    ).length;

    isFullyCorrect =
      selectedAnswers.length === allCorrectAnswers.length &&
      selectedAnswers.every((ans) => allCorrectAnswers.includes(ans));
  }

  let gapValue =
    question.type === "image-selection" || question.type === "ordering"
      ? "quiz-options-without-gap"
      : "quiz-options-gap";

  let questionHTML = ``;

  questionHTML = `
   <div class="quiz-modal-content-top">
      <div class="close-btn-modal-container">
        <button class="button-none">
          <i class="close-btn-modal" onclick="closeQuizModal()">&times;</i>
        </button> 
      </div>
    <h2 class="quiz-title">${question.question}</h2>
    </div>
                ${
      question.type === "image-selection"
        ? `<div class="quiz-progress"> <p id="progress-counter">Acertos: ${correctSelectionsCount}/${allCorrectAnswers.length}</p></div>`
        : ""
    }
    <div class="quiz-options ${gapValue}">
  `;

  question.options.forEach((option) => {
    let extraClass = alreadyAnswered ? "disabled" : "";
    let iconContent = "";
    let iconColor = "";
    let backgroundColor = "";

    // Caso seja sele√ß√£o/ordena√ß√£o de imagem, exibe a imagem
    if (question.type === "image-selection" || question.type === "ordering") {
      // Mant√©m respostas corretas j√° marcadas e permite novas intera√ß√µes at√© que todas sejam corretas
      if (selectedAnswers.includes(option.id)) {
        extraClass += option.correct ? " selected-correct" : "";
        iconContent = option.correct ? "‚úÖ" : "";
      }

      questionHTML += `
      <div class="image-container quiz-option ${extraClass}" 
                 data-question-id="${question.id}" 
              data-answer="${option.id}" 
              ${isFullyCorrect ? "disabled" : ""}>
        <img src="${option.image}" alt="${
        option.answer
      }" class="selectable-image">
        <span class="option-text">${option.answer}</span>
        <span class="icon-feedback">${iconContent}</span>
      </div>
      `;
    } else {
      iconContent = option.letter;
      // Antes do fechamento do modal (apenas cor de fundo)
      if (!alreadyAnswered && selectedAnswers === option.letter) {
        extraClass += " selected"; // Apenas a cor de fundo
      }

      // Ap√≥s reabrir o modal (aplica a estiliza√ß√£o completa)
      if (alreadyAnswered && selectedAnswers === option.letter) {
        extraClass += " selected-option";
      }

      if (alreadyAnswered) {
        if (option.correct) {
          extraClass += " correct";
          iconContent = "‚úî"; // ‚úî
          iconColor = "correct-icon";
          backgroundColor = "option-already-answered";
        } else {
          extraClass += " incorrect";
          iconContent = "‚úñ"; // ‚úñ
          iconColor = "incorrect-icon";
          backgroundColor = "option-already-answered";
        }
      }

      questionHTML += `
        <button class="quiz-option ${extraClass}" 
                data-question-id="${question.id}" 
                data-answer="${option.letter}" 
                ${alreadyAnswered ? "disabled" : ""}>
          <span class="option-letter ${iconColor} ${backgroundColor}">${iconContent}</span>
          <span class="option-text">${option.answer}</span>
        </button>
      `;
    }
  });

  // Adiciona o bot√£o "OK" apenas se alreadyAnswered for falso
  if (!alreadyAnswered && question.type !== "image-selection") {
    questionHTML += `<button id="confirmAnswer" class="confirm-btn" ${
      alreadyAnswered ? "disabled" : ""
    }>OK</button>`;
  }

  questionHTML += `</div>`;
  modalContent.innerHTML = questionHTML;

  // Adiciona eventos de clique apenas se o usu√°rio ainda n√£o acertou tudo
  if (question.type === "image-selection" && !isFullyCorrect) {
    document.querySelectorAll(".image-container").forEach((container) => {
      container.addEventListener("click", function () {
        handleImageClick(this, question);
      });
    });
  }

  // Evento para destacar a op√ß√£o selecionada antes da confirma√ß√£o
  if (!alreadyAnswered && question.type !== "image-selection") {
    document.querySelectorAll(".quiz-option").forEach((button) => {
      button.addEventListener("click", function () {
        document
          .querySelectorAll(".quiz-option")
          .forEach((btn) =>
            btn.classList.remove("selected", "selected-option")
          );
        this.classList.add("selected"); // Apenas fundo cinza antes do fechamento
      });
    });

    document
      .getElementById("confirmAnswer")
      .addEventListener("click", function () {
        const selected = document.querySelector(".quiz-option.selected");
        if (selected) {
          const questionId = selected.getAttribute("data-question-id");
          const selectedAnswer = selected.getAttribute("data-answer");

          document.querySelectorAll(".quiz-option").forEach((btn) => {
            const answerLetter = btn.getAttribute("data-answer");
            const isCorrect = question.options.find(
              (opt) => opt.letter === answerLetter
            ).correct;

            let iconSpan = btn.querySelector(".option-letter");
            let textSpan = btn.querySelector(".option-text");

            // Se for a op√ß√£o selecionada, destaca a op√ß√£o selecionada
            if (btn.classList.contains("selected")) {
              btn.classList.add("selected-option");
            }

            if (isCorrect) {
              btn.classList.add("correct");
              iconSpan.textContent = "‚úî"; // ‚úÖ
              iconSpan.classList.add("correct-icon");
              iconSpan.classList.add("correct-background");
            } else {
              btn.classList.add("incorrect");
              iconSpan.textContent = "‚úñ"; // ‚ùå
              iconSpan.classList.add("incorrect-icon");
              iconSpan.classList.add("incorrect-background");
            }
            btn.classList.add("disabled");
            btn.disabled = true;

            // Remove a letra original para evitar duplica√ß√£o
            textSpan.textContent = question.options.find(
              (opt) => opt.letter === answerLetter
            ).answer;
          });

          saveProgress(questionId, selectedAnswer);
          const confirmAnswer = document.getElementById("confirmAnswer");
          confirmAnswer.disabled = true;
          confirmAnswer.style.display = "none";
        } else {
          alert("Selecione uma resposta antes de confirmar.");
        }
      });
  }
}

// Fun√ß√£o para abrir o modal do quiz e carregar a pergunta correta
function openQuizModal(panoramaId) {
  console.log("Abrindo modal do quiz para:", panoramaId);
  document.getElementById("quizModalContainer").style.display = "flex";
  renderQuestion(panoramaId);
}

// Fun√ß√£o para fechar o modal ao clicar no bot√£o (X) ou fora do modal
function closeQuizModal() {
  document.getElementById("quizModalContainer").style.display = "none";
}

// Fun√ß√£o para recuperar progresso salvo
function getProgress() {
  const cookies = document.cookie.split("; ");
  for (let cookie of cookies) {
    let [name, value] = cookie.split("=");
    if (name === "quizProgress") {
      let parsed = JSON.parse(decodeURIComponent(value));
      if (!parsed.selectedAnswers) {
        parsed.selectedAnswers = {}; // Garante que sempre tenha um objeto vazio
      }
      return parsed;
    }
  }
  return {
    answeredQuestions: [],
    lastQuestion: null,
    lastPanorama: null,
    selectedAnswers: {},
  };
}
// Fun√ß√£o para recuperar par√¢metros da URL
function getURLParameter(name) {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get(name); // Retorna o valor do par√¢metro na URL (ex: "img2")
}

// Redirecionamento ao iniciar o tour (baseado na √∫ltima quest√£o respondida)
window.onload = function () {
  const progress = getProgress(); // Pega o √∫ltimo progresso salvo nos cookies

  if (progress && progress.lastPanorama) {
    const currentPanorama = getURLParameter("media-name"); // Pega o panorama atual da URL

    if (currentPanorama !== progress.lastPanorama) {
      // Se o panorama atual n√£o for igual ao √∫ltimo salvo, redireciona

      console.log("Redirecionando para panorama salvo:", progress.lastPanorama);
      window.location.replace(`index.htm?media-name=${progress.lastPanorama}`);
    } else {
      console.log("O usu√°rio j√° est√° no panorama correto:", currentPanorama);
    }
  } else {
    console.log("Nenhuma quest√£o respondida, iniciando do primeiro panorama.");
  }
};

// # Fun√ß√µes para quest√µes do tipo: image-selection # //

// Exibe o modal de conclus√£o dinamicamente com confetes em tela cheia
function showCompletionModal() {
  // Se o modal j√° existir, remove para recriar atualizado
  const existingModal = document.getElementById("completionModal");
  if (existingModal) {
    existingModal.remove();
  }

  // Criar o modal dinamicamente
  const modal = document.createElement("div");
  modal.id = "completionModal";
  modal.className = "completion-modal";
  modal.innerHTML = `
    <h2>Parab√©ns! Voc√™ retirou todos os itens! üéâ</h2>
    <button onclick="closeBothModals()">Prosseguir</button>
  `;

  // Criar e adicionar container de confetes na p√°gina inteira
  let confettiContainer = document.createElement("div");
  confettiContainer.id = "confetti-container";

  document.body.appendChild(confettiContainer);
  document.body.appendChild(modal);

  // Exibir o modal
  modal.style.display = "flex";
  modal.style.flexDirection = "column";

  // Chamar a fun√ß√£o para gerar confetes
  generateConfetti();

  // Remover os confetes ap√≥s 5 segundos
  setTimeout(() => {
    confettiContainer.remove();
  }, 5000);
}

// Gera cores aleat√≥rias para os confetes
function getRandomColor() {
  const colors = ["#ff0", "#f00", "#0f0", "#00f", "#f0f", "#0ff", "#ff6600"];
  return colors[Math.floor(Math.random() * colors.length)];
}

// Fun√ß√£o para criar confetes animados
function generateConfetti() {
  const confettiContainer = document.getElementById("confetti-container");

  for (let i = 0; i < 400; i++) {
    // N√∫mero de confetes aumentados para cobrir toda a tela
    let confetti = document.createElement("div");
    confetti.className = "confetti";
    confetti.style.left = `${Math.random() * 100}%`; // Posi√ß√£o aleat√≥ria horizontal
    confetti.style.animationDelay = `${Math.random() * 1}s`; // Atraso aleat√≥rio
    confetti.style.backgroundColor = getRandomColor(); // Cor aleat√≥ria
    confetti.style.width = `${Math.random() * 10 + 5}px`; // Tamanhos variados
    confetti.style.height = `${Math.random() * 20 + 5}px`; // Altura variada

    confettiContainer.appendChild(confetti);
  }
}

// Fecha o modal de conclus√£o e o modal do quiz
function closeBothModals() {
  const completionModal = document.getElementById("completionModal");
  if (completionModal) {
    completionModal.remove();
  }
  document.getElementById("quizModalContainer").style.display = "none";
}

// Abre modal da quest√£o do tipo image-selection
function openImageSelectionModal() {
  document.getElementById("imageSelectionModal").style.display = "flex";
  renderQuestion();
}

// Fecha modal da quest√£o do tipo image-selection
function closeImageSelectionModal() {
  document.getElementById("imageSelectionModal").style.display = "none";
}

// Fun√ß√£o para controlar o clique nas imagens da quest√£o do tipo image-selection
function handleImageClick(container, question) {
  const imageId = container.getAttribute("data-answer");
  const option = question.options.find((opt) => opt.id === imageId);
  const iconSpan = container.querySelector(".icon-feedback");

  let selectedAnswers = getSelectedAnswer(question.id);

  if (option.correct) {
    if (!selectedAnswers.includes(imageId)) {
      selectedAnswers.push(imageId);
    }
    container.classList.add("selected-correct");
    iconSpan.textContent = "‚úÖ";
  } else {
    iconSpan.textContent = "‚ùå";
    setTimeout(() => {
      iconSpan.textContent = "";
    }, 500);
  }

  saveProgress(question.id, selectedAnswers); // Salva progresso

  // Se o usu√°rio acertar todas as imagens, exibe modal de conclus√£o
  const allCorrectAnswers = question.options
    .filter((opt) => opt.correct)
    .map((opt) => opt.id);

  // Atualiza a contagem de acertos no DOM
  const correctSelectionsCount = selectedAnswers.filter((ans) =>
    allCorrectAnswers.includes(ans)
  ).length;
  const progressCounter = document.getElementById("progress-counter");
  if (progressCounter) {
    progressCounter.textContent = `Acertos: ${correctSelectionsCount}/${allCorrectAnswers.length}`;
  }

  // Verifica se todas as imagens corretas foram selecionadas
  if (
    selectedAnswers.length === allCorrectAnswers.length &&
    selectedAnswers.every((ans) => allCorrectAnswers.includes(ans))
  ) {
    showCompletionModal();
  }
}
